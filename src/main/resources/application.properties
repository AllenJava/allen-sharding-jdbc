#应用端口号
server.port=8089

#session过期时长
server.session-timeout=1800
server.context-path=/

#mybatis
mybatis.type-aliases-package=com.allen.po
mybatis.mapper-locations=classpath:mybatis/*.xml

##datasource1
#spring.datasource.url=jdbc:mysql://192.168.0.234:3306/test_msg1?useUnicode=true&characterEncoding=utf-8
#spring.datasource.username=dcc_dev
#spring.datasource.password=123456
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#
##datasource2
#spring.datasource.url=jdbc:mysql://192.168.0.234:3306/test_msg2?useUnicode=true&characterEncoding=utf-8
#spring.datasource.username=dcc_dev
#spring.datasource.password=123456
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#####################读写分离  START#########################

# 配置真实数据源
sharding.jdbc.datasource.names=test_msg_master,test_msg_slave1,test_msg_slave2

# 配置主库
sharding.jdbc.datasource.test_msg_master.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.test_msg_master.url=jdbc:mysql://192.168.0.234:3306/test_msg_master?useUnicode=true&characterEncoding=utf-8
sharding.jdbc.datasource.test_msg_master.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.test_msg_master.username=dcc_dev
sharding.jdbc.datasource.test_msg_master.password=123456
# 初始化大小，最小，最大
sharding.jdbc.datasource.test_msg_master.initialSize=5
sharding.jdbc.datasource.test_msg_master.minIdle=1
sharding.jdbc.datasource.test_msg_master.maxActive=50
# 配置获取连接等待超时的时间
sharding.jdbc.datasource.test_msg_master.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
sharding.jdbc.datasource.test_msg_master.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
sharding.jdbc.datasource.test_msg_master.minEvictableIdleTimeMillis=300000
sharding.jdbc.datasource.test_msg_master.validationQuery=SELECT 1 FROM DUAL
sharding.jdbc.datasource.test_msg_master.testWhileIdle=true
sharding.jdbc.datasource.test_msg_master.testOnBorrow=false
sharding.jdbc.datasource.test_msg_master.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小(5.5及以上版本有PSCache，建议开启)
sharding.jdbc.datasource.test_msg_master.poolPreparedStatements=true
sharding.jdbc.datasource.test_msg_master.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙(监控统计用的filter:stat;日志用的filter:log4j;防御sql注入的filter:wall)
sharding.jdbc.datasource.test_msg_master.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
sharding.jdbc.datasource.test_msg_master.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# 配置第一个从库
sharding.jdbc.datasource.test_msg_slave1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.test_msg_slave1.url=jdbc:mysql://192.168.0.234:3306/test_msg_slave1?useUnicode=true&characterEncoding=utf-8
sharding.jdbc.datasource.test_msg_slave1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.test_msg_slave1.username=dcc_dev
sharding.jdbc.datasource.test_msg_slave1.password=123456
# 初始化大小，最小，最大
sharding.jdbc.datasource.test_msg_slave1.initialSize=5
sharding.jdbc.datasource.test_msg_slave1.minIdle=1
sharding.jdbc.datasource.test_msg_slave1.maxActive=50
# 配置获取连接等待超时的时间
sharding.jdbc.datasource.test_msg_slave1.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
sharding.jdbc.datasource.test_msg_slave1.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
sharding.jdbc.datasource.test_msg_slave1.minEvictableIdleTimeMillis=300000
sharding.jdbc.datasource.test_msg_slave1.validationQuery=SELECT 1 FROM DUAL
sharding.jdbc.datasource.test_msg_slave1.testWhileIdle=true
sharding.jdbc.datasource.test_msg_slave1.testOnBorrow=false
sharding.jdbc.datasource.test_msg_slave1.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小(5.5及以上版本有PSCache，建议开启)
sharding.jdbc.datasource.test_msg_slave1.poolPreparedStatements=true
sharding.jdbc.datasource.test_msg_slave1.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙(监控统计用的filter:stat;日志用的filter:log4j;防御sql注入的filter:wall)
sharding.jdbc.datasource.test_msg_slave1.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
sharding.jdbc.datasource.test_msg_slave1.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# 配置第二个从库
sharding.jdbc.datasource.test_msg_slave2.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.test_msg_slave2.url=jdbc:mysql://192.168.0.234:3306/test_msg_slave2?useUnicode=true&characterEncoding=utf-8
sharding.jdbc.datasource.test_msg_slave2.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.test_msg_slave2.username=dcc_dev
sharding.jdbc.datasource.test_msg_slave2.password=123456
sharding.jdbc.datasource.test_msg_slave1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.test_msg_slave1.url=jdbc:mysql://192.168.0.234:3306/test_msg_slave1?useUnicode=true&characterEncoding=utf-8
sharding.jdbc.datasource.test_msg_slave1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.test_msg_slave1.username=dcc_dev
sharding.jdbc.datasource.test_msg_slave1.password=123456
# 初始化大小，最小，最大
sharding.jdbc.datasource.test_msg_slave2.initialSize=5
sharding.jdbc.datasource.test_msg_slave2.minIdle=1
sharding.jdbc.datasource.test_msg_slave2.maxActive=50
# 配置获取连接等待超时的时间
sharding.jdbc.datasource.test_msg_slave2.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
sharding.jdbc.datasource.test_msg_slave2.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
sharding.jdbc.datasource.test_msg_slave2.minEvictableIdleTimeMillis=300000
sharding.jdbc.datasource.test_msg_slave2.validationQuery=SELECT 1 FROM DUAL
sharding.jdbc.datasource.test_msg_slave2.testWhileIdle=true
sharding.jdbc.datasource.test_msg_slave2.testOnBorrow=false
sharding.jdbc.datasource.test_msg_slave2.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小(5.5及以上版本有PSCache，建议开启)
sharding.jdbc.datasource.test_msg_slave2.poolPreparedStatements=true
sharding.jdbc.datasource.test_msg_slave2.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙(监控统计用的filter:stat;日志用的filter:log4j;防御sql注入的filter:wall)
sharding.jdbc.datasource.test_msg_slave2.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
sharding.jdbc.datasource.test_msg_slave2.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# 配置读写分离
# 配置从库选择策略，提供轮询与随机，这里选择用轮询
sharding.jdbc.config.masterslave.load-balance-algorithm-type=round-robin
sharding.jdbc.config.masterslave.name=ds_m_1_s_2
sharding.jdbc.config.masterslave.master-data-source-name=test_msg_master
sharding.jdbc.config.masterslave.slave-data-source-names=test_msg_slave1,test_msg_slave2
# 开启SQL显示，默认值: false，注意：仅配置读写分离时不会打印日志！！！
sharding.jdbc.config.sharding.props.sql.show=true

#####################读写分离  END#########################

